module;

#include <concepts>
#include <ranges>

export module concepts;

export namespace concepts {

    /**
     * Type is a container of elements convertible to T
     */
    template <typename Container, typename T>
    concept CompatibleRange =
        std::ranges::range<Container> &&
        std::convertible_to<std::ranges::range_value_t<Container>, T>;

    /**
     * Type is an object that can be converted into a vk::Extent2D object
     */
    template <typename T>
    concept ConvertibleToExtent2D = requires(T t) {
        { []<typename U>(U&& obj) {
            auto&& [a, b] = std::forward<U>(obj);
            static_assert(std::convertible_to<decltype(a), std::uint32_t>);
            static_assert(std::convertible_to<decltype(b), std::uint32_t>);
        } (t) };
    };
}
